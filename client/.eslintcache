[{"C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\index.js":"1","C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\pages\\Home.js":"2","C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\pages\\NoMatch.js":"3","C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\utils\\UserContext.js":"4","C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\components\\Login\\Login.js":"5","C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\components\\TopNav\\TopNav.js":"6","C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\components\\Signup\\Signup.js":"7","C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\components\\Editor.js":"8","C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\pages\\Profile\\index.js":"9"},{"size":498,"mtime":1606095192931,"results":"10","hashOfConfig":"11"},{"size":5820,"mtime":1606882519089,"results":"12","hashOfConfig":"11"},{"size":108,"mtime":1606095192934,"results":"13","hashOfConfig":"11"},{"size":274,"mtime":1606095192940,"results":"14","hashOfConfig":"11"},{"size":1769,"mtime":1606591218102,"results":"15","hashOfConfig":"11"},{"size":2096,"mtime":1606755709056,"results":"16","hashOfConfig":"11"},{"size":9013,"mtime":1606595802023,"results":"17","hashOfConfig":"11"},{"size":12154,"mtime":1606881682606,"results":"18","hashOfConfig":"11"},{"size":34,"mtime":1606095192936,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"f0fwmg",{"filePath":"23","messages":"24","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\index.js",[],["46","47"],"C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\pages\\Home.js",["48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70"],"import React, { useState, useContext, useEffect} from 'react';\nimport UserContext from '../utils/UserContext'\nimport LogInBro from '../components/loginbro'\nimport AceModalGlobal from '../components/codemodalglobal';\nimport Posts from '../components/posts'\nimport { Container, Row, Col, Jumbotron, Form, Button, FormGroup, Label, Input, InputGroup, InputGroupText, InputGroupAddon, CustomInput } from 'reactstrap';\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\nimport { faSeedling } from '@fortawesome/free-solid-svg-icons'\nimport { faHatWizard } from '@fortawesome/free-solid-svg-icons'\nimport { faHamburger } from '@fortawesome/free-solid-svg-icons'\nimport { faGhost } from '@fortawesome/free-solid-svg-icons'\nimport { faCouch } from '@fortawesome/free-solid-svg-icons'\nimport { faDrumstickBite } from '@fortawesome/free-solid-svg-icons'\nimport { faDove } from '@fortawesome/free-solid-svg-icons'\nimport { faBomb } from '@fortawesome/free-solid-svg-icons'\nimport { faAppleAlt } from '@fortawesome/free-solid-svg-icons'\nimport { faUserInjured } from '@fortawesome/free-solid-svg-icons'\nimport { faUserNinja } from '@fortawesome/free-solid-svg-icons'\nimport { faDog } from '@fortawesome/free-solid-svg-icons'\nimport { faHippo } from '@fortawesome/free-solid-svg-icons'\nimport { faBreadSlice } from '@fortawesome/free-solid-svg-icons'\nimport { faCat } from '@fortawesome/free-solid-svg-icons'\nimport { faBug } from '@fortawesome/free-solid-svg-icons'\nimport { faPoo } from '@fortawesome/free-solid-svg-icons'\nimport { faFrog } from '@fortawesome/free-solid-svg-icons'\nimport { faUserTie } from '@fortawesome/free-solid-svg-icons'\nimport FooterPage from '../components/FooterPage'\nimport Login from '../components/Login/Login'\nimport Axios from 'axios';\n\nconst Home = () => {\n  const { user, loggedIn, logout } = useContext(UserContext);\n  const [globalInputState, setGlobalInputState] = useState({language:\"html\", keywords:\"\"});\n  const [snipList, setSnipList] = useState([]);\n  const [feedList, setFeedList] = useState([]);\n\n  const postsexample = [{ name: \"example 1\", author: \"Bob\", language: \"Html\", snip: \"<p>Hello World</p>\", avatar: faCat, note: \"Quality Stuff\" }, { name: \"example 2\", author: \"Tim\", language: \"Html\", snip: \"<p>Good night moon</p>\", avatar: faDog, note: \"Some Good Code Here\" }]\n\n  function handleGlobalInput(event) {\n    const { name, value } = event.target;\n    setGlobalInputState({...globalInputState, [name]: value})\n    console.log(globalInputState)\n  }\n\n  const globalSearchCode = () => {Axios.get(\"/api/codes/findall\").then(data=> {\n    console.log(data.data)\n    let results = data.data\n    let arr = []\n    results.forEach(item=> {\n      if(item.public === true && item.keywords.includes(globalInputState.keywords) && item.scriptType.toUpperCase() === globalInputState.language.toUpperCase()){\n        arr.push(item)\n      }\n    })\n    setSnipList(arr)\n  })}\n\n  function feedFill(user) {Axios.get(\"/api/codes/findall\").then(data=> {\n    console.log(data.data)\n    let results = data.data\n    let feedArr = []\n    results.forEach(item=> {\n      if(user.following.includes(item.userId) ){\n        feedArr.push(item)\n      }\n    })\n    setFeedList(feedArr)\n  })}\n\n  useEffect(() => {\n    if(user !== null){\n    feedFill(user);\n    }\n  }\n  // [user, loggedIn]\n  )\n\n\n  \n\n  return (<>\n    {loggedIn ? (<>\n      <Container>\n        <Row>\n          <Col sm={12} md={4}>\n            <Jumbotron style={{ marginTop: \"1rem\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\", justifyContent: \"center\", textAlign: \"center\", opacity: \"0.7\", paddingTop: \"1rem\" }}>\n              <h4 className=\"mb-4\">Global Code Search</h4>\n              <FormGroup>\n                <CustomInput type=\"select\" id=\"exampleCustomSelect\" onChange={handleGlobalInput} name=\"language\" >\n                  <option value=\"\">Select</option>\n                  <option>JavaScript</option>\n                  <option>HTML</option>\n                  <option>CSS</option>\n                  <option>Mark Down</option>\n                  <option>Handlebars</option>\n                </CustomInput>\n              </FormGroup>\n              <br />\n              <InputGroup size=\"sm\" className=\"mb-3\" onChange={handleGlobalInput}>\n                <InputGroupAddon addonType=\"prepend\">\n                  <InputGroupText id=\"Keywords\"></InputGroupText>\n                </InputGroupAddon>\n                <Input name=\"keywords\" aria-label=\"Small\" aria-describedby=\"Keywords\" placeholder=\"KeyWords\" />\n              </InputGroup>\n              <Button color=\"primary\" onClick={globalSearchCode}>Search</Button>\n              <br />\n            {snipList.map(item => <><AceModalGlobal name={item.title} snip={item.snip} sniptwo={item.snipTwo} snipthree={item.snipThree} language={item.scriptType} languagetwo={item.scriptTypeTwo} languagethree={item.scriptTypeThree} keywords={item.keywords} comments={item.comments} Public={item.public} updated={item.updated} userId={item.userId} _id={item._id}/><br /></>)}\n            </Jumbotron>\n          </Col>\n          <Col sm={12} md={8}>\n            <Jumbotron style={{ marginTop: \"1rem\", opacity: \"0.7\", paddingTop: \"1rem\" }}>\n              <h2 className=\"mb-4\" style={{ textAlign: \"center\" }}>News Feed:</h2>\n              {feedList.map((item) => <><Posts avatar= {faHamburger} author=\"Philip\" name={item.title} snip={item.snip} sniptwo={item.snipTwo} snipthree={item.snipThree} language={item.scriptType} languagetwo={item.scriptTypeTwo} languagethree={item.scriptTypeThree} keywords={item.keywords} comments={item.comments} Public={item.public} updated={item.updated} userId={item.userId} _id={item._id} /></>)}\n            </Jumbotron>\n          </Col>\n        </Row>\n      </Container>\n\n\n    </>\n    ) : (\n        <Login />\n      )}\n\n  </>\n  )\n}\nexport default Home;\n","C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\pages\\NoMatch.js",[],["71","72"],"C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\utils\\UserContext.js",[],["73","74"],"C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\components\\Login\\Login.js",["75","76","77","78","79"],"import React, { useContext } from 'react';\nimport { Button, Form, FormGroup, Label, Input, Alert, Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport UserContext from '../../utils/UserContext';\n\nconst Login = () => {\n  const { userData, handleInputChange, handleLogin } = useContext(UserContext);\n  return (\n    <div style={{display:\"flex\", flexDirection:\"column\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"10%\",opacity:\"0.8\"}}> <Card\n        bg=\"secondary\"\n        text='white'\n        style={{ width: '30rem' }}\n        className=\"mb-2 bg-secondary\"\n      >\n       \n        <CardBody>\n      <h2 className=\"loginTitle text-white\">Log In</h2>\n      <hr />\n      <Form>\n        <FormGroup>\n          <Label for=\"username\" className=\"text-white\">Username</Label>\n          <Input\n            type=\"text\"\n            name=\"username\"\n            id=\"username\"\n            placeholder=\"username\"\n            value={userData.username}\n            onChange={handleInputChange}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"password\" className=\"text-white\">Password</Label>\n          <Input\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"password\"\n            value={userData.password}\n            onChange={handleInputChange}\n          />\n        </FormGroup>\n        <Button onClick={handleLogin} color=\"primary\" block>\n          Log In\n        </Button><br></br>\n        <p className=\"signupLink\">\n          <Link className=\"text-white\" to=\"/signup\">Need an account? Sign up here</Link>\n        </p>\n      </Form>\n      </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default Login;\n",["80","81"],"C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\components\\TopNav\\TopNav.js",["82"],"import React, { useState, useContext } from 'react';\nimport UserContext from '../../utils/UserContext';\nimport './TopNav.scss';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from 'reactstrap';\n\nconst Navigation = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { loggedIn, logout } = useContext(UserContext);\n\n  const toggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div>\n      <Navbar className=\"navbar py-0\" color=\"dark\" dark expand=\"md\">\n        <NavbarBrand href=\"/\"><img src=\"https://img.icons8.com/color/48/000000/source-code.png\"/>QC Pro</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/\">Home</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/newSnip\">New Snip</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/profile\">Profile</NavLink>\n            </NavItem>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                <i className=\"fas fa-user-secret\"></i>\n              </DropdownToggle>\n              <DropdownMenu right>\n                {loggedIn ? (\n                  <DropdownItem>\n                    <NavLink style={{color:\"black\"}} onClick={logout}>Logout</NavLink>\n                  </DropdownItem>\n                ) : (\n                  <>\n                    <DropdownItem>\n                      <NavLink style={{color:\"black\"}} href=\"/login\">Log In</NavLink>\n                    </DropdownItem>\n                    <DropdownItem>\n                      <NavLink  style={{color:\"black\"}} href=\"/signup\">Sign Up</NavLink>\n                    </DropdownItem>\n                  </>\n                )}\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n};\nexport default Navigation;\n","C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\components\\Signup\\Signup.js",["83","84","85","86","87"],"import React, { useState, useEffect, useContext } from 'react';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  Alert, Card, CustomInput, CardBody,\n  CardTitle, CardSubtitle\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport UserContext from '../../utils/UserContext';\nimport './signup.css'\nimport AvatarOption from '../avatarOp'\n\nconst Signup = () => {\n  const Avatars = [  \"Plant\",\"Frog\", \"Wizard\",\"Burger\",\"Guitar\",\"Ghost\",\"Couch\",\"Drumstick\",\"Bird\",\"Bomb\",\"Apple\",\"Injured Person\",\"Ninja\",\"Person\",\"Tie Person\",\"Hippo\",\"Dog\",\"Home Slice\",\"Cat\"]\n  const {\n    userData,\n    handleInputChange,\n    handleSignup,\n    failureMessage,\n  } = useContext(UserContext);\n  const [validFirstName, setValidFirstName] = useState(false);\n  const [validLastName, setValidLastName] = useState(false);\n  const [validEmail, setValidEmail] = useState(false);\n  const [validUserName, setValidUserName] = useState(false);\n  const [validPassword, setValidPassword] = useState(false);\n  const [isConfirmed, setIsConfirmed] = useState(false);\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState({});\n\n  useEffect(() => {\n    console.log(errorMessage);\n  }, []);\n\n  const handleConfirmPassword = (event) => {\n    const { value } = event.target;\n    setConfirmPassword(value);\n  };\n\n  // make sure firstname is at least 3 characters\n  const checkFirstname = () => {\n    const length = userData.firstname.length;\n    if (length === 0) {\n      setValidFirstName(false);\n      setErrorMessage({ ...errorMessage, firstname: '' });\n    } else if (length < 3) {\n      setValidFirstName(false);\n      setErrorMessage({\n        ...errorMessage,\n        firstname: 'First Name should be at least 3 characters.',\n      });\n    } else {\n      setValidFirstName(true);\n      setErrorMessage({ ...errorMessage, firstname: '' });\n    }\n  };\n\n  // make sure firstname is at least 3 characters\n  const checkLastname = () => {\n    const length = userData.lastname.length;\n    if (length === 0) {\n      setValidLastName(false);\n      setErrorMessage({ ...errorMessage, lastname: '' });\n    } else if (length < 3) {\n      setValidLastName(false);\n      setErrorMessage({\n        ...errorMessage,\n        lastname: 'Last Name should be at least 3 characters.',\n      });\n    } else {\n      setValidLastName(true);\n      setErrorMessage({ ...errorMessage, lastname: '' });\n    }\n  };\n\n  // uses regex to check is email is valid\n  const checkEmail = () => {\n    const validEmail = new RegExp(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    );\n    const valid = validEmail.test(userData.email);\n    const length = userData.email.length;\n    if (length === 0) {\n      setValidEmail(false);\n      setErrorMessage({ ...errorMessage, email: '' });\n    } else if (!valid) {\n      setValidEmail(false);\n      setErrorMessage({\n        ...errorMessage,\n        email: 'Please enter a valid email address.',\n      });\n    } else {\n      setValidEmail(true);\n      setErrorMessage({ ...errorMessage, email: '' });\n    }\n  };\n\n  // make sure username is at least 5 characters\n  const checkUsername = () => {\n    const length = userData.username.length;\n    if (length === 0) {\n      setValidUserName(false);\n      setErrorMessage({ ...errorMessage, username: '' });\n    } else if (length < 5) {\n      setValidUserName(false);\n      setErrorMessage({\n        ...errorMessage,\n        username: 'Username should be at least 5 characters.',\n      });\n    } else {\n      setValidUserName(true);\n      setErrorMessage({ ...errorMessage, username: '' });\n    }\n  };\n\n  // checks is password meets regex test (at least 8 letters, 1 capital and 1 number)\n  const checkPassword = () => {\n    const strongPassword = new RegExp(\n      /(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/,\n    );\n    const valid = strongPassword.test(userData.password);\n    const length = userData.password.length;\n    if (length === 0) {\n      setValidPassword(false);\n      setErrorMessage({ ...errorMessage, password: '' });\n    } else if (!valid) {\n      setValidPassword(false);\n      setErrorMessage({\n        ...errorMessage,\n        password: 'Password should be at least 8 letters, 1 capital & 1 number',\n      });\n    } else {\n      setValidPassword(true);\n      setErrorMessage({ ...errorMessage, password: '' });\n    }\n  };\n\n  // checks if 2 password fields match\n  const checkConfirmPassword = () => {\n    if (confirmPassword.length === 0) {\n      setIsConfirmed(false);\n      setErrorMessage({ ...errorMessage, confirmPassword: '' });\n    } else if (\n      userData.password !== '' &&\n      userData.password === confirmPassword\n    ) {\n      setIsConfirmed(true);\n      setErrorMessage({ ...errorMessage, confirmPassword: '' });\n    } else {\n      setIsConfirmed(false);\n      setErrorMessage({\n        ...errorMessage,\n        confirmPassword: 'Passwords must match',\n      });\n    }\n  };\n\n  return (\n    <div style={{display:\"flex\", flexDirection:\"column\", alignItems: \"left\", justifyContent: \"left\", marginTop: \"10%\",opacity:\"0.8\"}}> <Card\n        bg=\"secondary\"\n        text='white'\n        style={{ width: '30rem' }}\n        className=\"mb-2 bg-secondary\"\n      >\n       \n        <CardBody>\n\n        <h2 className=\"loginTitle text-white text-left\">Sign Up</h2>\n      {failureMessage ? <Alert type=\"danger\">{failureMessage}</Alert> : <p></p>}\n      <Form>\n        <FormGroup>\n          \n          <Input\n            type=\"text\"\n            name=\"firstname\"\n            id=\"firstname\"\n            placeholder=\"first name\"\n            value={userData.firstname}\n            onChange={handleInputChange}\n            onBlur={checkFirstname}\n            valid={validFirstName}\n          />\n          <div className=\"errorStyle\">{errorMessage['firstname']}</div>\n        </FormGroup>\n        <FormGroup>\n          <Input\n            type=\"text\"\n            id=\"lastname\"\n            name=\"lastname\"\n            placeholder=\"last name\"\n            value={userData.lastname}\n            onChange={handleInputChange}\n            onBlur={checkLastname}\n            valid={validLastName}\n          />\n          <div className=\"errorStyle\">{errorMessage['lastname']}</div>\n        </FormGroup>\n        <FormGroup>\n          <Input\n            type=\"email\"\n            name=\"email\"\n            id=\"email\"\n            placeholder=\"email@email.com\"\n            value={userData.email}\n            onChange={handleInputChange}\n            onBlur={checkEmail}\n            valid={validEmail}\n          />\n          <div className=\"errorStyle\">{errorMessage['email']}</div>\n        </FormGroup>\n        <FormGroup>\n          <Input\n            type=\"text\"\n            name=\"username\"\n            id=\"username\"\n            placeholder=\"username\"\n            value={userData.username}\n            onChange={handleInputChange}\n            onBlur={checkUsername}\n            valid={validUserName}\n          />\n          <div className=\"errorStyle\">{errorMessage['username']}</div>\n        </FormGroup>\n        <FormGroup>\n          <Input\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"password\"\n            value={userData.password}\n            onChange={handleInputChange}\n            onBlur={checkPassword}\n            valid={validPassword}\n          />\n          <div className=\"errorStyle\">{errorMessage['password']}</div>\n        </FormGroup>\n        <FormGroup>\n          <Input\n            type=\"password\"\n            name=\"password\"\n            id=\"confirmPassword\"\n            placeholder=\"confirm password\"\n            value={confirmPassword}\n            onChange={handleConfirmPassword}\n            onKeyUp={checkConfirmPassword}\n            valid={isConfirmed}\n          />\n          <div className=\"errorStyle\">{errorMessage['confirmPassword']}</div>\n        </FormGroup>\n        <FormGroup>\n                \n              <CustomInput size=\"sm\" type=\"select\" name=\"avatar\" onChange={handleInputChange}>\n            <option>Choose an Avatar</option>\n  {Avatars.map(item =><AvatarOption name={item}>{item}</AvatarOption>)}\n            </CustomInput>\n            </FormGroup>\n        {/* if all fields are valid, allow the user to submit the form */}\n        {validFirstName &&\n        validLastName &&\n        validEmail &&\n        validUserName &&\n        validPassword &&\n        isConfirmed ? (\n          <Button onClick={handleSignup} color=\"success\" block>\n            Sign Up\n          </Button>\n        ) : (\n          <Button className = \"text-white\" onClick={handleSignup} color=\"primary\" block disabled>\n            Sign Up\n          </Button>\n        )}\n        <p className=\"signupLink text-white text-left\">\n          <Link className=\"text-white\" to=\"/login\">Already have an account? Log in here</Link>\n        </p>\n      </Form>\n      </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default Signup;\n","C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\components\\Editor.js",["88","89"],"C:\\Users\\phili\\Desktop\\QuikCodePro\\client\\src\\pages\\Profile\\index.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":3,"column":8,"nodeType":"96","messageId":"97","endLine":3,"endColumn":16},{"ruleId":"94","severity":1,"message":"98","line":6,"column":42,"nodeType":"96","messageId":"97","endLine":6,"endColumn":46},{"ruleId":"94","severity":1,"message":"99","line":6,"column":67,"nodeType":"96","messageId":"97","endLine":6,"endColumn":72},{"ruleId":"94","severity":1,"message":"100","line":7,"column":10,"nodeType":"96","messageId":"97","endLine":7,"endColumn":16},{"ruleId":"94","severity":1,"message":"101","line":8,"column":10,"nodeType":"96","messageId":"97","endLine":8,"endColumn":20},{"ruleId":"94","severity":1,"message":"102","line":9,"column":10,"nodeType":"96","messageId":"97","endLine":9,"endColumn":21},{"ruleId":"94","severity":1,"message":"103","line":11,"column":10,"nodeType":"96","messageId":"97","endLine":11,"endColumn":17},{"ruleId":"94","severity":1,"message":"104","line":12,"column":10,"nodeType":"96","messageId":"97","endLine":12,"endColumn":17},{"ruleId":"94","severity":1,"message":"105","line":13,"column":10,"nodeType":"96","messageId":"97","endLine":13,"endColumn":25},{"ruleId":"94","severity":1,"message":"106","line":14,"column":10,"nodeType":"96","messageId":"97","endLine":14,"endColumn":16},{"ruleId":"94","severity":1,"message":"107","line":15,"column":10,"nodeType":"96","messageId":"97","endLine":15,"endColumn":16},{"ruleId":"94","severity":1,"message":"108","line":16,"column":10,"nodeType":"96","messageId":"97","endLine":16,"endColumn":20},{"ruleId":"94","severity":1,"message":"109","line":17,"column":10,"nodeType":"96","messageId":"97","endLine":17,"endColumn":23},{"ruleId":"94","severity":1,"message":"110","line":18,"column":10,"nodeType":"96","messageId":"97","endLine":18,"endColumn":21},{"ruleId":"94","severity":1,"message":"111","line":20,"column":10,"nodeType":"96","messageId":"97","endLine":20,"endColumn":17},{"ruleId":"94","severity":1,"message":"112","line":21,"column":10,"nodeType":"96","messageId":"97","endLine":21,"endColumn":22},{"ruleId":"94","severity":1,"message":"113","line":23,"column":10,"nodeType":"96","messageId":"97","endLine":23,"endColumn":15},{"ruleId":"94","severity":1,"message":"114","line":24,"column":10,"nodeType":"96","messageId":"97","endLine":24,"endColumn":15},{"ruleId":"94","severity":1,"message":"115","line":25,"column":10,"nodeType":"96","messageId":"97","endLine":25,"endColumn":16},{"ruleId":"94","severity":1,"message":"116","line":26,"column":10,"nodeType":"96","messageId":"97","endLine":26,"endColumn":19},{"ruleId":"94","severity":1,"message":"117","line":27,"column":8,"nodeType":"96","messageId":"97","endLine":27,"endColumn":18},{"ruleId":"94","severity":1,"message":"118","line":32,"column":27,"nodeType":"96","messageId":"97","endLine":32,"endColumn":33},{"ruleId":"94","severity":1,"message":"119","line":37,"column":9,"nodeType":"96","messageId":"97","endLine":37,"endColumn":21},{"ruleId":"90","replacedBy":"120"},{"ruleId":"92","replacedBy":"121"},{"ruleId":"90","replacedBy":"122"},{"ruleId":"92","replacedBy":"123"},{"ruleId":"94","severity":1,"message":"124","line":2,"column":49,"nodeType":"96","messageId":"97","endLine":2,"endColumn":54},{"ruleId":"94","severity":1,"message":"125","line":2,"column":62,"nodeType":"96","messageId":"97","endLine":2,"endColumn":69},{"ruleId":"94","severity":1,"message":"126","line":2,"column":71,"nodeType":"96","messageId":"97","endLine":2,"endColumn":79},{"ruleId":"94","severity":1,"message":"127","line":3,"column":3,"nodeType":"96","messageId":"97","endLine":3,"endColumn":12},{"ruleId":"94","severity":1,"message":"128","line":3,"column":14,"nodeType":"96","messageId":"97","endLine":3,"endColumn":26},{"ruleId":"90","replacedBy":"129"},{"ruleId":"92","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":29,"column":31,"nodeType":"133","endLine":29,"endColumn":98},{"ruleId":"94","severity":1,"message":"99","line":6,"column":3,"nodeType":"96","messageId":"97","endLine":6,"endColumn":8},{"ruleId":"94","severity":1,"message":"134","line":8,"column":3,"nodeType":"96","messageId":"97","endLine":8,"endColumn":11},{"ruleId":"94","severity":1,"message":"127","line":10,"column":3,"nodeType":"96","messageId":"97","endLine":10,"endColumn":12},{"ruleId":"94","severity":1,"message":"128","line":10,"column":14,"nodeType":"96","messageId":"97","endLine":10,"endColumn":26},{"ruleId":"135","severity":1,"message":"136","line":36,"column":6,"nodeType":"137","endLine":36,"endColumn":8,"suggestions":"138"},{"ruleId":"94","severity":1,"message":"139","line":2,"column":8,"nodeType":"96","messageId":"97","endLine":2,"endColumn":16},{"ruleId":"94","severity":1,"message":"140","line":7,"column":8,"nodeType":"96","messageId":"97","endLine":7,"endColumn":13},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'LogInBro' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'Label' is defined but never used.","'faUser' is defined but never used.","'faSeedling' is defined but never used.","'faHatWizard' is defined but never used.","'faGhost' is defined but never used.","'faCouch' is defined but never used.","'faDrumstickBite' is defined but never used.","'faDove' is defined but never used.","'faBomb' is defined but never used.","'faAppleAlt' is defined but never used.","'faUserInjured' is defined but never used.","'faUserNinja' is defined but never used.","'faHippo' is defined but never used.","'faBreadSlice' is defined but never used.","'faBug' is defined but never used.","'faPoo' is defined but never used.","'faFrog' is defined but never used.","'faUserTie' is defined but never used.","'FooterPage' is defined but never used.","'logout' is assigned a value but never used.","'postsexample' is assigned a value but never used.",["141"],["142"],["141"],["142"],"'Alert' is defined but never used.","'CardImg' is defined but never used.","'CardText' is defined but never used.","'CardTitle' is defined but never used.","'CardSubtitle' is defined but never used.",["141"],["142"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FormText' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'errorMessage'. Either include it or remove the dependency array.","ArrayExpression",["143"],"'ReactDOM' is defined but never used.","'brace' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},"Update the dependencies array to be: [errorMessage]",{"range":"146","text":"147"},[1240,1242],"[errorMessage]"]