[{"C:\\Users\\paule\\Desktop\\directory\\homework\\QuikCodePro\\client\\src\\index.js":"1","C:\\Users\\paule\\Desktop\\directory\\homework\\QuikCodePro\\client\\src\\pages\\Home.js":"2","C:\\Users\\paule\\Desktop\\directory\\homework\\QuikCodePro\\client\\src\\utils\\codeAPI.js":"3","C:\\Users\\paule\\Desktop\\directory\\homework\\QuikCodePro\\client\\src\\components\\Signup\\Signup.js":"4","C:\\Users\\paule\\Desktop\\directory\\homework\\QuikCodePro\\client\\src\\pages\\newsnip.js":"5","C:\\Users\\paule\\Desktop\\directory\\homework\\QuikCodePro\\client\\src\\components\\Login\\Login.js":"6"},{"size":498,"mtime":1606276124092,"results":"7","hashOfConfig":"8"},{"size":4363,"mtime":1607017528905,"results":"9","hashOfConfig":"8"},{"size":669,"mtime":1606328462403,"results":"10","hashOfConfig":"8"},{"size":9013,"mtime":1606595902939,"results":"11","hashOfConfig":"8"},{"size":700,"mtime":1606276124106,"results":"12","hashOfConfig":"8"},{"size":1769,"mtime":1606590606732,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"nnphww",{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\paule\\Desktop\\directory\\homework\\QuikCodePro\\client\\src\\index.js",[],["30","31"],"C:\\Users\\paule\\Desktop\\directory\\homework\\QuikCodePro\\client\\src\\pages\\Home.js",["32","33","34","35","36"],"C:\\Users\\paule\\Desktop\\directory\\homework\\QuikCodePro\\client\\src\\utils\\codeAPI.js",["37"],"import axios from \"axios\";\n\nexport default {\n  // Gets all snips\n  getSnips: function() {\n    return axios.get(\"/api/codes/findall\");\n  },\n  // Gets the snip with the given id\n  getSnip: function(id) {\n    return axios.get(\"/api/codes/findone\" + id);\n  },\n  // Gets the snip with the given keywords\n  getSnipsByKey: function(keyword) {\n    return axios.get(\"/api/codes/key\" + keyword);\n  },\n  // Deletes the snip with the given id\n  deleteSnip: function(id) {\n    return axios.delete(\"/api/codes/delete\" + id);\n  },\n  // Saves a snip to the database\n  saveSnip: function(codeData) {\n      console.log(codeData)\n    return axios.post(\"/api/codes/save\", codeData);\n  }\n};",["38","39"],"C:\\Users\\paule\\Desktop\\directory\\homework\\QuikCodePro\\client\\src\\components\\Signup\\Signup.js",["40","41","42","43","44"],"import React, { useState, useEffect, useContext } from 'react';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  Alert, Card, CustomInput, CardBody,\n  CardTitle, CardSubtitle\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport UserContext from '../../utils/UserContext';\nimport './signup.css'\nimport AvatarOption from '../avatarOp'\n\nconst Signup = () => {\n  const Avatars = [  \"Plant\",\"Frog\", \"Wizard\",\"Burger\",\"Guitar\",\"Ghost\",\"Couch\",\"Drumstick\",\"Bird\",\"Bomb\",\"Apple\",\"Injured Person\",\"Ninja\",\"Person\",\"Tie Person\",\"Hippo\",\"Dog\",\"Home Slice\",\"Cat\"]\n  const {\n    userData,\n    handleInputChange,\n    handleSignup,\n    failureMessage,\n  } = useContext(UserContext);\n  const [validFirstName, setValidFirstName] = useState(false);\n  const [validLastName, setValidLastName] = useState(false);\n  const [validEmail, setValidEmail] = useState(false);\n  const [validUserName, setValidUserName] = useState(false);\n  const [validPassword, setValidPassword] = useState(false);\n  const [isConfirmed, setIsConfirmed] = useState(false);\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState({});\n\n  useEffect(() => {\n    console.log(errorMessage);\n  }, []);\n\n  const handleConfirmPassword = (event) => {\n    const { value } = event.target;\n    setConfirmPassword(value);\n  };\n\n  // make sure firstname is at least 3 characters\n  const checkFirstname = () => {\n    const length = userData.firstname.length;\n    if (length === 0) {\n      setValidFirstName(false);\n      setErrorMessage({ ...errorMessage, firstname: '' });\n    } else if (length < 3) {\n      setValidFirstName(false);\n      setErrorMessage({\n        ...errorMessage,\n        firstname: 'First Name should be at least 3 characters.',\n      });\n    } else {\n      setValidFirstName(true);\n      setErrorMessage({ ...errorMessage, firstname: '' });\n    }\n  };\n\n  // make sure firstname is at least 3 characters\n  const checkLastname = () => {\n    const length = userData.lastname.length;\n    if (length === 0) {\n      setValidLastName(false);\n      setErrorMessage({ ...errorMessage, lastname: '' });\n    } else if (length < 3) {\n      setValidLastName(false);\n      setErrorMessage({\n        ...errorMessage,\n        lastname: 'Last Name should be at least 3 characters.',\n      });\n    } else {\n      setValidLastName(true);\n      setErrorMessage({ ...errorMessage, lastname: '' });\n    }\n  };\n\n  // uses regex to check is email is valid\n  const checkEmail = () => {\n    const validEmail = new RegExp(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    );\n    const valid = validEmail.test(userData.email);\n    const length = userData.email.length;\n    if (length === 0) {\n      setValidEmail(false);\n      setErrorMessage({ ...errorMessage, email: '' });\n    } else if (!valid) {\n      setValidEmail(false);\n      setErrorMessage({\n        ...errorMessage,\n        email: 'Please enter a valid email address.',\n      });\n    } else {\n      setValidEmail(true);\n      setErrorMessage({ ...errorMessage, email: '' });\n    }\n  };\n\n  // make sure username is at least 5 characters\n  const checkUsername = () => {\n    const length = userData.username.length;\n    if (length === 0) {\n      setValidUserName(false);\n      setErrorMessage({ ...errorMessage, username: '' });\n    } else if (length < 5) {\n      setValidUserName(false);\n      setErrorMessage({\n        ...errorMessage,\n        username: 'Username should be at least 5 characters.',\n      });\n    } else {\n      setValidUserName(true);\n      setErrorMessage({ ...errorMessage, username: '' });\n    }\n  };\n\n  // checks is password meets regex test (at least 8 letters, 1 capital and 1 number)\n  const checkPassword = () => {\n    const strongPassword = new RegExp(\n      /(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/,\n    );\n    const valid = strongPassword.test(userData.password);\n    const length = userData.password.length;\n    if (length === 0) {\n      setValidPassword(false);\n      setErrorMessage({ ...errorMessage, password: '' });\n    } else if (!valid) {\n      setValidPassword(false);\n      setErrorMessage({\n        ...errorMessage,\n        password: 'Password should be at least 8 letters, 1 capital & 1 number',\n      });\n    } else {\n      setValidPassword(true);\n      setErrorMessage({ ...errorMessage, password: '' });\n    }\n  };\n\n  // checks if 2 password fields match\n  const checkConfirmPassword = () => {\n    if (confirmPassword.length === 0) {\n      setIsConfirmed(false);\n      setErrorMessage({ ...errorMessage, confirmPassword: '' });\n    } else if (\n      userData.password !== '' &&\n      userData.password === confirmPassword\n    ) {\n      setIsConfirmed(true);\n      setErrorMessage({ ...errorMessage, confirmPassword: '' });\n    } else {\n      setIsConfirmed(false);\n      setErrorMessage({\n        ...errorMessage,\n        confirmPassword: 'Passwords must match',\n      });\n    }\n  };\n\n  return (\n    <div style={{display:\"flex\", flexDirection:\"column\", alignItems: \"left\", justifyContent: \"left\", marginTop: \"10%\",opacity:\"0.8\"}}> <Card\n        bg=\"secondary\"\n        text='white'\n        style={{ width: '30rem' }}\n        className=\"mb-2 bg-secondary\"\n      >\n       \n        <CardBody>\n\n        <h2 className=\"loginTitle text-white text-left\">Sign Up</h2>\n      {failureMessage ? <Alert type=\"danger\">{failureMessage}</Alert> : <p></p>}\n      <Form>\n        <FormGroup>\n          \n          <Input\n            type=\"text\"\n            name=\"firstname\"\n            id=\"firstname\"\n            placeholder=\"first name\"\n            value={userData.firstname}\n            onChange={handleInputChange}\n            onBlur={checkFirstname}\n            valid={validFirstName}\n          />\n          <div className=\"errorStyle\">{errorMessage['firstname']}</div>\n        </FormGroup>\n        <FormGroup>\n          <Input\n            type=\"text\"\n            id=\"lastname\"\n            name=\"lastname\"\n            placeholder=\"last name\"\n            value={userData.lastname}\n            onChange={handleInputChange}\n            onBlur={checkLastname}\n            valid={validLastName}\n          />\n          <div className=\"errorStyle\">{errorMessage['lastname']}</div>\n        </FormGroup>\n        <FormGroup>\n          <Input\n            type=\"email\"\n            name=\"email\"\n            id=\"email\"\n            placeholder=\"email@email.com\"\n            value={userData.email}\n            onChange={handleInputChange}\n            onBlur={checkEmail}\n            valid={validEmail}\n          />\n          <div className=\"errorStyle\">{errorMessage['email']}</div>\n        </FormGroup>\n        <FormGroup>\n          <Input\n            type=\"text\"\n            name=\"username\"\n            id=\"username\"\n            placeholder=\"username\"\n            value={userData.username}\n            onChange={handleInputChange}\n            onBlur={checkUsername}\n            valid={validUserName}\n          />\n          <div className=\"errorStyle\">{errorMessage['username']}</div>\n        </FormGroup>\n        <FormGroup>\n          <Input\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"password\"\n            value={userData.password}\n            onChange={handleInputChange}\n            onBlur={checkPassword}\n            valid={validPassword}\n          />\n          <div className=\"errorStyle\">{errorMessage['password']}</div>\n        </FormGroup>\n        <FormGroup>\n          <Input\n            type=\"password\"\n            name=\"password\"\n            id=\"confirmPassword\"\n            placeholder=\"confirm password\"\n            value={confirmPassword}\n            onChange={handleConfirmPassword}\n            onKeyUp={checkConfirmPassword}\n            valid={isConfirmed}\n          />\n          <div className=\"errorStyle\">{errorMessage['confirmPassword']}</div>\n        </FormGroup>\n        <FormGroup>\n                \n              <CustomInput size=\"sm\" type=\"select\" name=\"avatar\" onChange={handleInputChange}>\n            <option>Choose an Avatar</option>\n  {Avatars.map(item =><AvatarOption name={item}>{item}</AvatarOption>)}\n            </CustomInput>\n            </FormGroup>\n        {/* if all fields are valid, allow the user to submit the form */}\n        {validFirstName &&\n        validLastName &&\n        validEmail &&\n        validUserName &&\n        validPassword &&\n        isConfirmed ? (\n          <Button onClick={handleSignup} color=\"success\" block>\n            Sign Up\n          </Button>\n        ) : (\n          <Button className = \"text-white\" onClick={handleSignup} color=\"primary\" block disabled>\n            Sign Up\n          </Button>\n        )}\n        <p className=\"signupLink text-white text-left\">\n          <Link className=\"text-white\" to=\"/login\">Already have an account? Log in here</Link>\n        </p>\n      </Form>\n      </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default Signup;\n","C:\\Users\\paule\\Desktop\\directory\\homework\\QuikCodePro\\client\\src\\pages\\newsnip.js",["45","46","47"],"C:\\Users\\paule\\Desktop\\directory\\homework\\QuikCodePro\\client\\src\\components\\Login\\Login.js",["48","49","50","51","52"],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":3,"column":8,"nodeType":"59","messageId":"60","endLine":3,"endColumn":16},{"ruleId":"57","severity":1,"message":"61","line":6,"column":42,"nodeType":"59","messageId":"60","endLine":6,"endColumn":46},{"ruleId":"57","severity":1,"message":"62","line":6,"column":67,"nodeType":"59","messageId":"60","endLine":6,"endColumn":72},{"ruleId":"57","severity":1,"message":"63","line":8,"column":8,"nodeType":"59","messageId":"60","endLine":8,"endColumn":18},{"ruleId":"57","severity":1,"message":"64","line":13,"column":27,"nodeType":"59","messageId":"60","endLine":13,"endColumn":33},{"ruleId":"65","severity":1,"message":"66","line":3,"column":1,"nodeType":"67","endLine":25,"endColumn":3},{"ruleId":"53","replacedBy":"68"},{"ruleId":"55","replacedBy":"69"},{"ruleId":"57","severity":1,"message":"62","line":6,"column":3,"nodeType":"59","messageId":"60","endLine":6,"endColumn":8},{"ruleId":"57","severity":1,"message":"70","line":8,"column":3,"nodeType":"59","messageId":"60","endLine":8,"endColumn":11},{"ruleId":"57","severity":1,"message":"71","line":10,"column":3,"nodeType":"59","messageId":"60","endLine":10,"endColumn":12},{"ruleId":"57","severity":1,"message":"72","line":10,"column":14,"nodeType":"59","messageId":"60","endLine":10,"endColumn":26},{"ruleId":"73","severity":1,"message":"74","line":36,"column":6,"nodeType":"75","endLine":36,"endColumn":8,"suggestions":"76"},{"ruleId":"57","severity":1,"message":"63","line":4,"column":8,"nodeType":"59","messageId":"60","endLine":4,"endColumn":18},{"ruleId":"57","severity":1,"message":"77","line":11,"column":13,"nodeType":"59","messageId":"60","endLine":11,"endColumn":17},{"ruleId":"57","severity":1,"message":"64","line":11,"column":29,"nodeType":"59","messageId":"60","endLine":11,"endColumn":35},{"ruleId":"57","severity":1,"message":"78","line":2,"column":49,"nodeType":"59","messageId":"60","endLine":2,"endColumn":54},{"ruleId":"57","severity":1,"message":"79","line":2,"column":62,"nodeType":"59","messageId":"60","endLine":2,"endColumn":69},{"ruleId":"57","severity":1,"message":"80","line":2,"column":71,"nodeType":"59","messageId":"60","endLine":2,"endColumn":79},{"ruleId":"57","severity":1,"message":"71","line":3,"column":3,"nodeType":"59","messageId":"60","endLine":3,"endColumn":12},{"ruleId":"57","severity":1,"message":"72","line":3,"column":14,"nodeType":"59","messageId":"60","endLine":3,"endColumn":26},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'LogInBro' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'Label' is defined but never used.","'FooterPage' is defined but never used.","'logout' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["81"],["82"],"'FormText' is defined but never used.","'CardTitle' is defined but never used.","'CardSubtitle' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'errorMessage'. Either include it or remove the dependency array.","ArrayExpression",["83"],"'user' is assigned a value but never used.","'Alert' is defined but never used.","'CardImg' is defined but never used.","'CardText' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},"Update the dependencies array to be: [errorMessage]",{"range":"86","text":"87"},[1240,1242],"[errorMessage]"]